"use strict";(self.webpackChunksqliste_doc=self.webpackChunksqliste_doc||[]).push([[3606],{9868:(e,r,n)=>{n.d(r,{Zo:()=>l,kt:()=>g});var t=n(6687);function s(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){s(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function i(e,r){if(null==e)return{};var n,t,s=function(e,r){if(null==e)return{};var n,t,s={},a=Object.keys(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||(s[n]=e[n]);return s}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)n=a[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var u=t.createContext({}),p=function(e){var r=t.useContext(u),n=r;return e&&(n="function"==typeof e?e(r):o(o({},r),e)),n},l=function(e){var r=p(e.components);return t.createElement(u.Provider,{value:r},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},m=t.forwardRef((function(e,r){var n=e.components,s=e.mdxType,a=e.originalType,u=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),c=p(n),m=s,g=c["".concat(u,".").concat(m)]||c[m]||d[m]||a;return n?t.createElement(g,o(o({ref:r},l),{},{components:n})):t.createElement(g,o({ref:r},l))}));function g(e,r){var n=arguments,s=r&&r.mdxType;if("string"==typeof e||s){var a=n.length,o=new Array(a);o[0]=m;var i={};for(var u in r)hasOwnProperty.call(r,u)&&(i[u]=r[u]);i.originalType=e,i[c]="string"==typeof e?e:s,o[1]=i;for(var p=2;p<a;p++)o[p]=n[p];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},668:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>u,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var t=n(8792),s=(n(6687),n(9868));const a={sidebar_position:7},o="Gestion d'erreurs",i={unversionedId:"intregrations/sql-server/error-handling",id:"intregrations/sql-server/error-handling",title:"Gestion d'erreurs",description:"Lorsqu'une erreur se produit dans une proc\xe9dure au cours du pipeline, cela l'interrompt et retourne une erreur 500 (INTERNAL SERVER ERROR).",source:"@site/i18n/fr/docusaurus-plugin-content-docs/current/intregrations/sql-server/error-handling.md",sourceDirName:"intregrations/sql-server",slug:"/intregrations/sql-server/error-handling",permalink:"/sqliste/fr/docs/intregrations/sql-server/error-handling",draft:!1,editUrl:"https://github.com/corentin703/sqliste/tree/main/doc/docs/intregrations/sql-server/error-handling.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"docSidebar",previous:{title:"En-t\xeate HTTP",permalink:"/sqliste/fr/docs/intregrations/sql-server/http-operations/headers"},next:{title:"OpenAPI",permalink:"/sqliste/fr/docs/intregrations/sql-server/openapi"}},u={},p=[],l={toc:p},c="wrapper";function d(e){let{components:r,...n}=e;return(0,s.kt)(c,(0,t.Z)({},l,n,{components:r,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"gestion-derreurs"},"Gestion d'erreurs"),(0,s.kt)("p",null,"Lorsqu'une erreur se produit dans une proc\xe9dure au cours du ",(0,s.kt)("em",{parentName:"p"},"pipeline"),", cela l'interrompt et retourne une erreur 500 (",(0,s.kt)("em",{parentName:"p"},"INTERNAL SERVER ERROR"),")."),(0,s.kt)("p",null,"Afin de vous permettre d'impl\xe9menter une gestion d'erreurs, il est possible de prendre un param\xe8tre standard ",(0,s.kt)("em",{parentName:"p"},"error")," dans les proc\xe9dures du ",(0,s.kt)("em",{parentName:"p"},"pipeline"),".",(0,s.kt)("br",null),"\nCeci fait, lorsque qu'une erreur va survenir, SQListe va consulter la liste des arguments dans les proc\xe9dures du ",(0,s.kt)("em",{parentName:"p"},"pipeline")," n'ayant pas \xe9t\xe9 ex\xe9cut\xe9s, et si existant, prendra la premi\xe8re d'entre-elles et ex\xe9cutera.",(0,s.kt)("br",null)),(0,s.kt)("p",null,"Si cette proc\xe9dure ne remonte pas d'erreur \xe0 son tour, celle-ci sera consid\xe9r\xe9e comme \xe9tant g\xe9r\xe9e."),(0,s.kt)("p",null,"L'argument ",(0,s.kt)("em",{parentName:"p"},"error")," est un JSON r\xe9pondant au format suivant :"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json",metastring:"lines",lines:!0},'{\n  "message": "Message de l\'erreur", // Cela peut contenir une chaine tout \xe0 fait arbitraire *\n  "attributes": {\n    "state": 1 // \xc9tat de l\'erreur remont\xe9 par SQL Server\n  }\n}\n')),(0,s.kt)("p",null,"Ce m\xe9canisme va vous permettre d'intercepter une erreur, et de modifier la r\xe9ponse en cons\xe9quence."),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},"Lorsque plusieurs proc\xe9dures du ",(0,s.kt)("em",{parentName:"p"},"pipeline")," remontent des erreurs, le m\xe9canisme s'ex\xe9cute \xe0 chaque fois.")),(0,s.kt)("admonition",{type:"note"},(0,s.kt)("mdxAdmonitionTitle",{parentName:"admonition"},"\xc0 propos du champ ",(0,s.kt)("em",{parentName:"mdxAdmonitionTitle"},"message")," de l'argument ",(0,s.kt)("em",{parentName:"mdxAdmonitionTitle"},"error")," *"),(0,s.kt)("p",{parentName:"admonition"},"Il y a possibilit\xe9 de faire passer une chaine structur\xe9e (par exemple un JSON) en tant que message dans un ",(0,s.kt)("em",{parentName:"p"},"RAISERROR"),".\nVous le retrouverez ici, et pourrez r\xe9aliser un traitement sur la r\xe9ponse avec. ")),(0,s.kt)("p",null,"Cas pratique : un post-intergiciel attrapant toutes les erreurs :"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sql"},"-- #Middleware(Order = 1000, After = true)\nCREATE OR ALTER PROCEDURE [web].[p_middleware_catch_error]\n    @request_body NVARCHAR(MAX) = NULL,\n    @request_headers NVARCHAR(MAX) = NULL,\n    @request_cookies NVARCHAR(MAX) = NULL,\n    @request_path NVARCHAR(MAX) = NULL,\n    @pipeline_storage NVARCHAR(MAX),\n    @error NVARCHAR(MAX) = NULL\nAS\nBEGIN\n    IF (@error IS NULL)\n    BEGIN\n        RETURN;\n    END\n\n    -- On r\xe9cup\xe8re la propri\xe9t\xe9 \"message\" du JSON d'erreur\n    SET @error_message = JSON_VALUE(@error, '$.message');\n\n    -- Si ce n'est pas un JSON, on ne le g\xe8re pas (SQListe retournera un HTTP 500)\n    IF (ISJSON(@error_message) = 0)\n    BEGIN\n        RAISERROR(@error_message, 18, 1);\n        RETURN;\n    END\n    \n    DECLARE @error_message NVARCHAR(MAX);\n    DECLARE @response_body NVARCHAR(MAX);\n    DECLARE @response_headers NVARCHAR(MAX) = N'{ \"Content-Type\": \"application/json\" }';\n\n    -- On d\xe9chiffre le JSON et on r\xe9alise notre traitement\n    DECLARE\n        @message NVARCHAR(MAX),\n        @status INT\n    ;\n\n    SELECT\n        @message = [error_message],\n        @status = [http_status]\n    FROM OPENJSON(@error_message)\n    WITH (\n        [error_message] NVARCHAR(MAX),\n        [http_status] INT\n    );\n\n    SET @response_body = (\n        SELECT\n            @message AS [message],\n            @status AS [status]\n        FOR JSON PATH\n    );\n\n    SELECT\n         JSON_QUERY(@response_body, '$[0]') AS [response_body]\n        ,@status AS [response_status]\n        ,@response_headers AS [response_headers]\n        ,0 AS [next]\n    ;\nEND\nGO\n")),(0,s.kt)("p",null,"Dans cet exemple, le message pass\xe9 au ",(0,s.kt)("em",{parentName:"p"},"RAISERROR")," est un JSON, sur lequel nous r\xe9alisons un traitement afin d'alt\xe9rer la r\xe9ponse de mani\xe8re adapt\xe9e."))}d.isMDXComponent=!0}}]);